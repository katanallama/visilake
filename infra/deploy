#!/usr/bin/env bash
set -e  # Exit immediately if a command exits with a non-zero status

echo "Loading the Localstack Pro Docker image..."
docker load < "$(nix build --print-out-paths .#localstackpro-image)"

echo "Building and loading the nardo Docker image..."
docker load < "$(nix build --print-out-paths .#nardo-image)"

echo "Starting Localstack daemon"
localstack start -d

echo "Removing the localstack non-pro Docker image"
docker rmi localstack/localstack:latest

echo "Creating a new ECR repository locally"
repoUri=$(awslocal ecr create-repository --repository-name repo1 | jq -r '.repository.repositoryUri')

if [ "$repoUri" == "" ]; then
    echo -e "\033[1;33mFailed to create a new ECR repository locally \033[0m\n"
    exit 1
else
    echo -e "Repo URI: $repoUri"

    echo "Tagging the Docker image: $repoUri"
    localImageName="nardo:latest"
    docker tag $localImageName "$repoUri"

    echo "Pushing the Docker image to local ECR URL: $repoUri"
    docker push "$repoUri"

    echo "Removing the local nardo Docker image"
    # docker rmi "$localImageName"
    docker rmi nardo:latest
fi

echo "Creating ECS infrastructure locally"
awslocal cloudformation create-stack --stack-name infra \
    --template-body file://infra/private.vpc.yml
awslocal cloudformation wait stack-create-complete --stack-name infra

echo "Deploying ECS app to local environment"
awslocal cloudformation create-stack --stack-name nardo \
    --template-body file://infra/private.nardo.yml \
    --parameters ParameterKey=ImageUrl,ParameterValue=$repoUri
awslocal cloudformation wait stack-create-complete --stack-name nardo

echo "ECS app successfully deployed. Trying to access app endpoint."
clusters=$(awslocal ecs list-clusters)
echo -e "\nClusters: $clusters\n"

cluster_arn=$(echo $clusters | jq -r '.clusterArns[0]')
# echo -e "Cluster arn: $cluster_arn\n"

## Get cluster tasks
for i in {1..5}; do
    tasks=$(awslocal ecs list-tasks --cluster $cluster_arn)
    echo -e "Tasks: $tasks\n"
    task_arn=$(echo $tasks | jq -r '.taskArns[0]')
    if [ "$task_arn" == "null" ]; then
        echo -e "\033[1;33mNo task found \033[0m\n"
        exit 1
    fi
    if [ "$task_arn" != "null" ]; then
        break
    fi
    sleep 2
done
# echo -e "Task arn: $task_arn\n"

## Get task ports
for i in {1..5}; do
    app=$(awslocal ecs describe-tasks --cluster $cluster_arn --tasks $task_arn)
    echo -e "App: $app\n"
    app_port=$(echo $app | jq -r '.tasks[0].containers[0].networkBindings[0].hostPort')
    if [ "$app_port" == "" ]; then
        echo -e "\033[1;33mNo application found \033[0m\n"
        exit 1
    fi
    if [ "$app_port" != "null" ]; then
        break
    fi
    sleep 2
done

# Get tables
tables=$(awslocal dynamodb list-tables)
echo -e "Tables: $tables\n"

# Get queues
queues=$(awslocal sqs list-queues)
echo -e "Queues: $queues\n"

echo -e "Curling localhost:$app_port\n"
curl localhost:$app_port

echo -e "\n\nApp successfully deployed to http://localhost:$app_port"

awslocal dynamodb batch-write-item --request-items file://./infra/useCases/mockUseCasesBatchCommand.json
